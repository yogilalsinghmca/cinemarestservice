type: edu
files:
- name: src/cinema/Main.java
  visible: true
  text: |
    package cinema;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class Main {
        public static void main(String[] args) {
            SpringApplication.run(Main.class, args);
        }
    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=28852
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    buildscript {
        repositories {
            mavenCentral()
        }
        dependencies {
            classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
            classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
        }
    }

    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
    }
  learner_created: false
- name: test/CinemaTests.java
  visible: false
  text: |-
    import cinema.Main;
    import com.google.gson.Gson;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.util.Map;

    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;

    public class CinemaTests extends SpringTest {

        private static final String ALREADY_PURCHASED_ERROR_MESSAGE = "The ticket has been already purchased!";
        private static final String OUT_OF_BOUNDS_ERROR_MESSAGE = "The number of a row or a column is out of bounds!";

        private static final Gson gson = new Gson();

        public CinemaTests() {
            super(Main.class);
        }

        private static void checkStatusCode(HttpResponse resp, int status) {
            if (resp.getStatusCode() != status) {
                throw new WrongAnswer(
                    resp.getRequest().getMethod() + " " +
                        resp.getRequest().getLocalUri() +
                        " should respond with status code " + status + ", " +
                        "responded: " + resp.getStatusCode() + "\n\n" +
                        "Response body:\n\n" + resp.getContent()
                );
            }
        }

        CheckResult testEndpoint() {
            HttpResponse response = get("/seats").send();
            checkStatusCode(response, 200);
            return CheckResult.correct();
        }

        CheckResult testEndpointAvailableSeats() {
            HttpResponse response = get("/seats").send();
            expect(response.getContent()).asJson().check(
                isObject()
                    .value("available_seats",
                        isArray(
                            81,
                            isObject()
                                .value("row", isInteger(i -> i >= 1 && i <= 9))
                                .value("column", isInteger(i -> i >= 1 && i <= 9))
                                .value("price", isInteger(price -> price == 10 || price == 8))
                        )
                    )
                    .value("total_columns", 9)
                    .value("total_rows", 9)
            );
            return CheckResult.correct();
        }

        CheckResult testPurchaseTicket() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("row", 1)
                        .value("column", 1)
                        .value("price", 10)
                );
            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatTicketHasBeenPurchased() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", ALREADY_PURCHASED_ERROR_MESSAGE)
                        .anyOtherValues()
                );
            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatNumbersOutOfBounds() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "10",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "10"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "-1",
                    "column", "-1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );


            return CheckResult.correct();
        }

        @DynamicTest
        DynamicTesting[] dynamicTests = new DynamicTesting[]{
            this::testEndpoint,
            this::testEndpointAvailableSeats,
            this::testPurchaseTicket,
            this::testErrorMessageThatTicketHasBeenPurchased,
            this::testErrorMessageThatNumbersOutOfBounds
        };
    }
  learner_created: false
- name: src/cinema/model/CinemaDTO.java
  visible: true
  learner_created: true
- name: src/cinema/model/SeatDTO.java
  visible: true
  learner_created: true
- name: src/cinema/exception/CustomGlobalExceptionHandler.java
  visible: true
  learner_created: true
- name: src/cinema/exception/SeatOutOfBoundsException.java
  visible: true
  text: |
    package cinema;

    import org.springframework.http.HttpStatus;
    import org.springframework.web.bind.annotation.ResponseStatus;

    @ResponseStatus(value = HttpStatus.BAD_REQUEST)
    public class SeatBookException extends  Exception{
        final private String reason;
        SeatBookException(String reason) {
            this.reason = reason;
        }
    }
  learner_created: true
- name: src/cinema/exception/TicketAlreadyPurchasedException.java
  visible: true
  learner_created: true
- name: src/cinema/CustomErrorResponse.java
  visible: true
  learner_created: true
- name: src/cinema/services/TicketService.java
  visible: true
  learner_created: true
- name: src/cinema/model/Ticket.java
  visible: true
  learner_created: true
- name: src/cinema/services/TokenService.java
  visible: true
  learner_created: true
- name: src/cinema/controller/BookingController.java
  visible: true
  text: |-
    package cinema;

    import org.springframework.web.bind.annotation.GetMapping;
    import org.springframework.web.bind.annotation.PostMapping;
    import org.springframework.web.bind.annotation.RequestBody;
    import org.springframework.web.bind.annotation.RestController;

    import java.util.ArrayList;
    import java.util.Iterator;
    import java.util.List;

    @RestController
    public class SeatRestController {

        final static int TOTAL_ROW = 9;
        final static int TOTAL_COLUMN = 9;
        private static CinemaDTO cinemaDTO = new CinemaDTO(TOTAL_ROW, TOTAL_COLUMN);


        @GetMapping("/seats")
        public CinemaDTO getSeats() {
            return cinemaDTO;
        }

        @PostMapping("/purchase")
        public SeatDTO purchaseTicket(@RequestBody SeatDTO seat) throws SeatBookException {
            List<SeatDTO> seatDTOList = cinemaDTO.getAvailable_seats();
            SeatDTO requestedSeatDTO = null;
            Iterator<SeatDTO> ite = seatDTOList.listIterator();
            while (ite.hasNext()) {
                if(seat.row() == ite.next().row() && seat.column() == ite.next().column()) {
                    requestedSeatDTO = ite.next();
                    ite.remove();
                    break;
                }
            }
            if (requestedSeatDTO != null) {
                return requestedSeatDTO;
            } else {
                throw new SeatBookException("The ticket has been already purchased!");
            }
        }
    }

    class CinemaDTO {
        private int total_rows;
        private int total_columns;
        List<SeatDTO> available_seats;

        public CinemaDTO(int total_rows, int total_columns) {
            this.total_rows = total_rows;
            this.total_columns = total_columns;
            this.available_seats = new ArrayList<>();
            SeatDTO seatDTO;
            for (int row = 1; row <= total_rows; row++) {
                for (int column = 1; column <= total_columns; column++) {

                    if(row <= 4) {
                        seatDTO = new SeatDTO(row, column, 10);
                    } else {
                        seatDTO = new SeatDTO(row, column, 8);
                    }
                    available_seats.add(seatDTO);
                }
            }
        }

        public int getTotal_rows() {
            return total_rows;
        }

        public int getTotal_columns() {
            return total_columns;
        }

        public List<SeatDTO> getAvailable_seats() {
            return available_seats;
        }

        public void setTotal_rows(int total_rows) {
            this.total_rows = total_rows;
        }

        public void setTotal_columns(int total_columns) {
            this.total_columns = total_columns;
        }

        public void setAvailable_seats(List<SeatDTO> available_seats) {
            this.available_seats = available_seats;
        }
    }

    record SeatDTO(int row, int column, int price){}
  learner_created: true
- name: src/cinema/model/TicketDTO.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/13376#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Tue, 21 Mar 2023 09:49:55 UTC"
record: 2
